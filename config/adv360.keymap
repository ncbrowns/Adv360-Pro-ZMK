#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "SELECT_WORD_LEFT";
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_WORD_RIGHT";
        };

        extend_word_left: extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LEFT))>;
            label = "EXTEND_WORD_LEFT";
        };

        extend_word_right: extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(RIGHT))>;
            label = "EXTEND_WORD_RIGHT";
        };

        select_line_left: select_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_LINE_LEFT";
        };

        select_line_right: select_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE_RIGHT";
        };

        extend_line_left: extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
            label = "EXTEND_LINE_LEFT";
        };

        extend_line_right: extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "EXTEND_LINE_RIGHT";
        };

        caps_word_exit: caps_lock_exit {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 5 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "CAPS_LOCK_EXIT";
        };

        caps_word_enter: caps_word_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 5 &caps_word>;
            label = "CAPS_WORD_ENTER";
        };

        triple_quote: triple_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp RET &kp RET &kp GRAVE &kp GRAVE &kp GRAVE &kp UP &kp HOME>;
            label = "TRIPLE_QUOTE";
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;
            label = "THANKS_PAT";
        };

        shift_left_symbol: shift_left_symbol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 1>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LSHFT &tog 1>;

            label = "SHIFT_LEFT_SYMBOL";
        };

        hmprm: hmprm {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Pinky Ring Middy";
            #binding-cells = <2>;
            tapping-term-ms = <270>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
        };

        hri: hri {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Index";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
        };

        hrprml: hrprml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Pinky Ring Middy Left";
            #binding-cells = <2>;
            tapping-term-ms = <270>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 70 71 72 73 74 75 37 38 53 68 69 70 35 36 65 66 67 52>;
        };

        hril: hril {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Index Left";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <37 38 53 68 69 70 7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 36 52 65 66 67 35>;
        };

        hrprmr: hrprmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Pinky Ring Middy Right";
            #binding-cells = <2>;
            tapping-term-ms = <270>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 38 69 70 68>;
        };

        hrir: hrir {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Index Right";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        layernav: layernav {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERNAV";
            #binding-cells = <0>;
            bindings = <&sl 3>, <&tog 3>;
        };

        layerkpfn: layerkpfn {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERKPFN";
            #binding-cells = <0>;
            bindings = <&sl 0>, <&tog 0>;
        };

        shiftcaps: shiftcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "Shift, Caps Word, Caps Lock";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings =
                <&sk LSHIFT>,
                <&caps_word>,
                <&caps_word_enter>,
                <&kp CAPS>;
        };

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            label = "SELECT_WORD";
            bindings = <&select_word_right>, <&select_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            label = "EXTEND_WORD";
            bindings = <&extend_word_right>, <&extend_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            label = "SELECT_LINE";
            bindings = <&select_line_right>, <&select_line_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            label = "EXTEND_LINE";
            bindings = <&extend_line_right>, <&extend_line_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hrill: hrill {
            compatible = "zmk,behavior-hold-tap";
            label = "HRILL";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <37 38 53 68 69 70 7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 36 52 65 66 67 35>;
        };

        hrilr: hrilr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRILR";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        hrilsr: hrilsr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRILSR";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
            bindings = <&shift_left_symbol>, <&kp>;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        Cut_Chord {
            bindings = <&kp LC(X)>;
            key-positions = <30 48>;
        };

        Copy_Chord {
            bindings = <&kp LC(C)>;
            key-positions = <31 31 49>;
        };

        Paste_Chord {
            bindings = <&kp LC(V)>;
            key-positions = <50 32>;
        };

        nav_left {
            bindings = <&tog 3>;
            key-positions = <33 32>;
        };

        nav_right {
            bindings = <&tog 3>;
            key-positions = <40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&kp EQUAL   &kp N1          &kp N2          &kp N3           &kp N4          &kp N5  &none                                                           &mo 4       &kp N6  &kp N7          &kp N8           &kp N9          &kp N0                  &kp MINUS
&kp TAB     &kp Q           &kp W           &kp E            &hrill 2 R      &kp T   &none                                                           &kp SYSREQ  &kp Y   &hrilr 1 U      &kp I            &kp O           &kp P                   &kp BSLH
&kp ESC     &hrprml LGUI A  &hrprml LALT S  &hrprml LCTRL D  &hril LSHIFT F  &kp G   &kp PRINTSCREEN  &to 3    &kp LALT      &kp LGUI   &to 3        &kp INS     &kp H   &hrir RSHIFT J  &hrprmr RCTRL K  &hrprmr RALT L  &hrprmr RGUI SEMICOLON  &kp SQT
&shiftcaps  &kp Z           &kp X           &kp C            &kp V           &kp B                             &kp HOME      &kp PG_UP                           &kp N   &hrilsr 0 M     &kp COMMA        &kp DOT         &kp FSLH                &shiftcaps
&mo 2       &kp GRAVE       &kp CAPS        &kp LEFT         &kp RIGHT               &kp BSPC         &kp DEL  &kp END       &kp PG_DN  &lt 0 ENTER  &kp SPACE           &kp UP          &kp DOWN         &kp LBKT        &kp RBKT                &mo 1
            >;
        };

        Symbol_Left {
            bindings = <
&trans        &trans         &kp F10  &kp F11  &kp F12  &trans            &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp C_VOL_UP  &kp GRAVE      &kp F7   &kp F8   &kp F9   &kp C_PREV        &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp C_MUTE    &kp TILDE      &kp F4   &kp F5   &kp F6   &kp C_PLAY_PAUSE  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp C_VOL_DN  &triple_quote  &kp F1   &kp F2   &kp F3   &kp C_NEXT                        &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans         &trans   &trans   &trans                     &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        Symbol_Right {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans        &trans        &trans        &trans     &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(LT)    &kp EQUAL  &thanks_pat  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PLUS)  &trans     &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &kp LBKT      &kp RBKT      &kp LS(GT)    &kp EQUAL  &trans       &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans                &trans        &trans        &trans     &trans       &trans
            >;
        };

        Navigation {
            bindings = <
&trans  &trans     &trans     &trans      &trans     &trans  &trans                                      &trans  &trans     &trans        &trans        &trans        &trans        &trans
&trans  &kp LC(Y)  &kp LC(T)  &kp LS(F3)  &kp LC(F)  &kp F3  &trans                                      &trans  &kp PG_UP  &kp HOME      &kp UP        &kp END       &trans        &trans
&trans  &trans     &trans     &trans      &trans     &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT     &trans        &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)   &kp LC(V)  &to 0                   &trans      &trans                  &to 0      &select_word  &extend_word  &select_line  &extend_line  &trans
&trans  &trans     &trans     &trans      &trans             &trans  &trans  &trans      &trans  &trans  &trans             &trans        &trans        &trans        &trans        &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        caps_word {
            bindings = <
&caps_word_exit EQUAL  &trans                 &trans                &trans                &trans                 &trans  &trans                                                                                               &trans                 &trans  &trans              &trans                 &trans                        &trans                         &kp UNDERSCORE
&caps_word_exit TAB    &trans                 &trans                &trans                &trans                 &trans  &trans                                                                                               &trans                 &trans  &trans              &trans                 &trans                        &trans                         &caps_word_exit BACKSLASH
&caps_word_exit ESC    &trans                 &trans                &trans                &trans                 &trans  &trans  &trans               &trans                    &trans                 &trans                 &trans                 &trans  &trans              &trans                 &trans                        &caps_word_exit SEMICOLON      &caps_word_exit SQT
&trans                 &trans                 &trans                &trans                &trans                 &trans                               &caps_word_exit HOME      &caps_word_exit PG_UP                                                &trans  &trans              &caps_word_exit COMMA  &caps_word_exit PERIOD        &caps_word_exit SLASH          &trans
&trans                 &caps_word_exit GRAVE  &caps_word_exit CAPS  &caps_word_exit LEFT  &caps_word_exit RIGHT          &trans  &caps_word_exit DEL  &caps_word_exit END       &caps_word_exit PG_DN  &caps_word_exit ENTER  &caps_word_exit SPACE          &caps_word_exit UP  &caps_word_exit DOWN   &caps_word_exit LEFT_BRACKET  &caps_word_exit RIGHT_BRACKET  &trans
            >;
        };
    };
};
