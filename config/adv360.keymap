#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 68 69 70 71 72 73 74 75 37 35 36 52 65 66 67>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 38 68 69 70>;
        };

        home_row_left_index: home_row_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 68 69 70 71 72 73 74 75 37 35 36 52 65 66 67>;
        };

        home_row_right_index: home_row_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 38 68 69 70>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&flash_toggle_layer 5>;
        };

        caps_word_hold_tap: caps_word_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
        };

        thumb_mods: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        cw1: cw1 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW1";
            bindings = <&kp N1>, <&exitcwkey EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw2: cw2 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW2";
            bindings = <&kp N2>, <&exitcwkey AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw3: cw3 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW3";
            bindings = <&kp N3>, <&exitcwkey HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw4: cw4 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW4";
            bindings = <&kp N4>, <&exitcwkey HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw5: cw5 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW5";
            bindings = <&kp N5>, <&exitcwkey PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw6: cw6 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW6";
            bindings = <&kp N6>, <&exitcwkey CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw7: cw7 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW7";
            bindings = <&kp N7>, <&exitcwkey AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw8: cw8 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW8";
            bindings = <&kp N8>, <&exitcwkey ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw9: cw9 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW9";
            bindings = <&kp N9>, <&exitcwkey LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cw0: cw0 {
            compatible = "zmk,behavior-mod-morph";
            label = "CW0";
            bindings = <&kp N0>, <&exitcwkey RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cwthumbmods: cwthumbmods {
            compatible = "zmk,behavior-hold-tap";
            label = "CWTHUMBMODS";
            bindings = <&exitcwkey>, <&exitcwkey>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        cwthumblayer: cwthumblayer {
            compatible = "zmk,behavior-hold-tap";
            label = "CWTHUMBLAYER";
            bindings = <&exitcwlayer>, <&exitcwkey>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        cwbackspace: cwbackspace {
            compatible = "zmk,behavior-hold-tap";
            label = "CWBACKSPACE";
            bindings = <&exitcwlayer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        alttab: alttab {
            compatible = "zmk,behavior-hold-tap";
            label = "ALTTAB";
            bindings = <&enterat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        ctrltab: ctrltab {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRLTAB";
            bindings = <&enterct>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3>;
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 5>,
                <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;

            label = "THANKS_PAT";
        };

        triple_bquote: triple_bquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_BQUOTE";
        };

        browser_copy_url: browser_copy_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(D) &kp LC(C) &kp ESCAPE &kp TAB>;
            label = "BROWSER_COPY_URL";
        };

        exitcwkey: exitcwkey {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &flash_toggle_layer 5>;
            label = "EXITCWKEY";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };

        flash_toggle_layer: flash_toggle_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&rgb_ug_status_macro &macro_param_1to1 &tog MACRO_PLACEHOLDER>;
            label = "FLASH_TOGGLE_LAYER";
        };

        exitcwlayer: exitcwmod {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &mo MACRO_PLACEHOLDER &flash_toggle_layer 5>;
            label = "EXITCWMOD";
        };

        exitcwmagic: exitcwmagic {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&flash_toggle_layer 5 &macro_param_1to1 &magic MACRO_PLACEHOLDER 0>;
            label = "EXITCWMAGIC";
        };

        enterat: enteralttab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp TAB &flash_toggle_layer 6>;

            label = "ENTERALTTAB";
        };

        exitat: exitalttab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp LALT &kp LCTRL>,
                <&macro_tap>,
                <&flash_toggle_layer 6>;

            label = "EXITALTTAB";
        };

        enterct: enterct {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &flash_toggle_layer 6>;

            label = "ENTERCT";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp EQUAL    &kp N1                 &kp N2                 &kp N3                  &kp N4                        &kp N5  &none                                                                                                                      &mo 7      &kp N6  &kp N7                         &kp N8                   &kp N9                  &kp N0                     &kp MINUS
&kp TAB      &kp Q                  &kp W                  &kp E                   &kp R                         &kp T   &kp C_PLAY_PAUSE                                                                                                           &none      &kp Y   &kp U                          &kp I                    &kp O                   &kp P                      &kp BSLH
&kp ESC      &home_row_left LGUI A  &home_row_left LALT S  &home_row_left LCTRL D  &home_row_left_index LSHFT F  &kp G   &kp C_MUTE                &thumb_layer 4 ESCAPE  &kp LGUI                   &kp RGUI                 &thumb_layer 2 TAB    &none      &kp H   &home_row_right_index RSHFT J  &home_row_right RCTRL K  &home_row_right RALT L  &home_row_right RGUI SEMI  &kp SQT
&shift_caps  &kp Z                  &kp X                  &kp C                   &kp V                         &kp B                                                    &thumb_mods LALT C_PP      &thumb_mods RALT C_MUTE                                   &kp N   &kp M                          &kp COMMA                &kp DOT                 &kp FSLH                   &shift_caps
&kp LCTRL    &kp HOME               &kp END                &kp LEFT                &kp RIGHT                             &thumb_layer 1 BACKSPACE  &thumb_layer 3 DELETE  &magic 7 0                 &magic 7 0               &thumb_layer 3 ENTER  &kp SPACE          &kp UP                         &kp DOWN                 &kp LBKT                &kp RBKT                   &kp INSERT
            >;
        };

        Navigation {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                                                             &trans           &trans              &trans             &trans           &trans         &trans       &trans
&trans  &trans    &trans    &trans     &trans     &trans  &kp PRINTSCREEN                                                                    &kp SCROLLLOCK   &kp HOME            &kp PAGE_DOWN      &kp PAGE_UP      &kp END        &thanks_pat  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &kp SYSREQ       &trans  &trans                     &trans                 &trans  &kp PAUSE_BREAK  &kp LEFT            &kp DOWN           &kp UP           &kp RIGHT      &trans       &trans
&trans  &trans    &trans    &trans     &trans     &trans                           &trans                     &trans                                          &kp LC(LEFT_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(PAGE_UP)  &kp LC(RIGHT)  &trans       &trans
&trans  &trans    &trans    &trans     &trans             &trans           &trans  &flash_toggle_layer 1      &flash_toggle_layer 1  &trans  &trans                               &trans             &trans           &trans         &trans       &trans
            >;
        };

        LeftWithMouse {
            bindings = <
&trans          &trans     &trans                        &trans             &trans                &trans             &trans                                                                                            &trans           &trans  &trans      &trans     &trans    &trans       &trans
&kp LC(LA(F3))  &trans     &ctrltab LS(TAB) LC(LS(TAB))  &alttab 0 LA(TAB)  &ctrltab TAB LC(TAB)  &trans             &kp PRINTSCREEN                                                                                   &kp SCROLLLOCK   &trans  &trans      &trans     &trans    &thanks_pat  &trans
&kp LC(LA(F2))  &sk LGUI   &sk LALT                      &sk LCTRL          &sk LSHFT             &trans             &kp SYSREQ       &trans  &trans                     &trans                 &flash_toggle_layer 2  &kp PAUSE_BREAK  &trans  &kp RSHIFT  &kp RCTRL  &kp RALT  &kp RGUI     &trans
&kp LA(LC(F1))  &kp LC(Z)  &kp LC(X)                     &kp LC(C)          &kp LC(V)             &browser_copy_url                           &trans                     &trans                                                         &trans  &trans      &trans     &trans    &trans       &trans
&trans          &trans     &trans                        &trans             &trans                                   &trans           &trans  &flash_toggle_layer 2      &flash_toggle_layer 2  &trans                 &trans                   &trans      &trans     &trans    &trans       &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &trans          &trans        &trans       &trans         &trans         &trans                                                                                                  &trans  &trans       &trans                &trans                 &trans         &trans            &trans
&trans  &kp GRAVE       &kp CARET     &kp PIPE     &kp AMPERSAND  &kp QUESTION   &trans                                                                                                  &trans  &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN  &kp GREATER_THAN  &trans
&trans  &kp TILDE       &kp ASTERISK  &kp MINUS    &kp PLUS       &trans         &trans  &trans                 &trans                     &trans                 &trans                 &trans  &kp DOLLAR   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL      &kp EXCLAMATION   &trans
&trans  &triple_bquote  &trans        &kp PERCENT  &kp SLASH      &kp BACKSLASH                                 &trans                     &trans                                                &kp HASH     &kp LEFT_BRACKET      &kp RBKT               &kp DOT        &arrow            &trans
&trans  &trans          &trans        &trans       &trans                        &trans  &flash_toggle_layer 3  &flash_toggle_layer 3      &flash_toggle_layer 3  &flash_toggle_layer 3  &trans               &trans                &trans                 &trans         &trans            &trans
            >;
        };

        FunctionKeys {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                                                                   &trans  &trans  &trans  &trans   &trans   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                                                                   &trans  &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans  &trans  &flash_toggle_layer 4  &trans                     &trans                 &trans  &trans  &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans    &trans    &trans     &trans     &trans                                 &trans                     &trans                                 &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans                 &flash_toggle_layer 4      &flash_toggle_layer 4  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        CapsWord {
            bindings = <
&exitcwkey EQUAL   &cw1             &cw2                         &cw3             &cw4              &cw5       &trans                                                                                                                         &trans            &cw6       &cw7                 &cw8              &cw9                     &cw0                      &caps_word_hold_tap MINUS LS(MINUS)
&exitcwkey TAB     &kp LS(Q)        &kp LS(W)                    &kp LS(E)        &kp LS(R)         &kp LS(T)  &trans                                                                                                                         &trans            &kp LS(Y)  &kp LS(U)            &kp LS(I)         &kp LS(O)                &kp LS(P)                 &exitcwkey BACKSLASH
&exitcwkey ESCAPE  &kp LS(A)        &caps_word_hold_tap S LS(S)  &kp LS(D)        &kp LS(F)         &kp LS(G)  &trans                    &cwthumblayer 4 ESCAPE  &exitcwkey LGUI             &exitcwkey RGUI           &cwthumblayer 2 TAB    &trans            &kp LS(H)  &kp LS(J)            &kp LS(K)         &kp LS(L)                &exitcwkey SEMI           &exitcwkey SQT
&kp LSHIFT         &kp LS(Z)        &kp LS(X)                    &kp LS(C)        &kp LS(V)         &kp LS(B)                                                    &cwthumbmods LALT C_PP      &cwthumbmods RALT C_MUTE                                           &kp LS(N)  &kp LS(M)            &exitcwkey COMMA  &exitcwkey PERIOD        &exitcwkey SLASH          &kp RSHFT
&trans             &exitcwkey HOME  &exitcwkey END               &exitcwkey LEFT  &exitcwkey RIGHT             &cwbackspace 1 BACKSPACE  &cwthumblayer 3 DELETE  &exitcwmagic 7              &exitcwmagic 7            &cwthumblayer 3 ENTER  &exitcwkey SPACE             &exitcwkey UP_ARROW  &exitcwkey DOWN   &exitcwkey LEFT_BRACKET  &exitcwkey RIGHT_BRACKET  &exitcwkey INS
            >;
        };

        TabSwitcher {
            bindings = <
&none    &none  &none  &none     &none      &none  &none                                      &none    &none        &none          &none         &none    &none  &none
&none    &none  &none  &none     &none      &none  &none                                      &none    &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP   &kp END  &none  &none
&exitat  &none  &none  &none     &none      &none  &none  &exitat  &none      &none  &none    &none    &kp LS(TAB)  &kp DOWN       &kp UP_ARROW  &kp TAB  &none  &none
&none    &none  &none  &none     &none      &none                  &none      &none                    &none        &none          &none         &none    &none  &none
&none    &none  &none  &kp LEFT  &kp RIGHT         &none  &none    &none      &none  &exitat  &exitat               &kp UP_ARROW   &kp DOWN      &none    &none  &none
            >;
        };

        System {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR                                                                             &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none                  &flash_toggle_layer 4  &none      &none  &flash_toggle_layer 2  &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                                                       &none      &none                                                 &none  &bl BL_TOG  &none       &none  &none  &none
&none  &none         &none         &none         &none                       &flash_toggle_layer 1  &flash_toggle_layer 3  &none      &none  &flash_toggle_layer 3  &none                          &bl BL_INC  &bl BL_DEC  &none  &none  &rgb_ug RGB_TOG
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
