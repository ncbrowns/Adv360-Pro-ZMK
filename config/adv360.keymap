#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 68 69 70 71 72 73 74 75 37 35 36 52 65 66 67>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 38 68 69 70>;
        };

        home_row_left_index: home_row_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 68 69 70 71 72 73 74 75 37 35 36 52 65 66 67>;
        };

        home_row_right_index: home_row_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 38 68 69 70>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&tog 4>;
        };

        layer_sticky_tap_or_hold: layer_sticky_tap_or_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_STICKY_TAP_OR_HOLD";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        sym_nav_lock: sym_nav_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "SYM_NAV_LOCK";
            #binding-cells = <0>;
            bindings = <&layer_sticky_tap_or_hold 2 3>, <&tog 2>;
        };

        hold_tap_keys: hold_tap_keys {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KEYS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        curly_morph: curly_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "CURLY_MORPH";
            bindings = <&kp LEFT_BRACE>, <&curly_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        paren_morph: paren_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_MORPH";
            bindings = <&kp LEFT_PARENTHESIS>, <&paren_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_morph: bracket_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_MORPH";
            bindings = <&kp LEFT_BRACKET>, <&bracket_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sym_or_eq: sym_or_eq {
            compatible = "zmk,behavior-hold-tap";
            label = "SYM_OR_EQ";
            bindings = <&add_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_plus: td_plus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLUS";
            #binding-cells = <0>;
            bindings = <&sym_or_eq PLUS PLUS>, <&double_tap PLUS>;
        };

        td_minus: td_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MINUS";
            #binding-cells = <0>;
            bindings = <&sym_or_eq MINUS MINUS>, <&double_tap MINUS>;
        };

        td_eq: td_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_EQ";
            #binding-cells = <0>;
            bindings = <&sym_or_eq EQUAL EQUAL>, <&double_tap EQUAL>;
        };

        td_not: td_not {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NOT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq EXCL EXCL>, <&double_tap EXCL>;
        };

        td_lt: td_lt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq LT LT>, <&double_tap LT>;
        };

        td_gt: td_gt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq GT GT>, <&double_tap GT>;
        };

        td_or: td_or {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_OR";
            #binding-cells = <0>;
            bindings = <&sym_or_eq PIPE PIPE>, <&double_tap PIPE>;
        };

        td_and: td_and {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_AND";
            #binding-cells = <0>;
            bindings =
                <&sym_or_eq AMPERSAND AMPERSAND>,
                <&double_tap AMPERSAND>;
        };

        td_xor: td_xor {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_XOR";
            #binding-cells = <0>;
            bindings = <&sym_or_eq CARET CARET>, <&double_tap CARET>;
        };

        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SLASH";
            #binding-cells = <0>;
            bindings = <&sym_or_eq SLASH SLASH>, <&double_tap SLASH>;
        };

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LOWER";
            #binding-cells = <0>;
            bindings = <&sl 2>, <&tog 2>;
        };

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            label = "SELECT_WORD";
            bindings = <&select_word_right>, <&select_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            label = "EXTEND_WORD";
            bindings = <&extend_word_right>, <&extend_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            label = "SELECT_LINE";
            bindings = <&select_line_right>, <&select_line_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            label = "EXTEND_LINE";
            bindings = <&extend_line_right>, <&extend_line_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_caps_while_caps_word: shift_caps_while_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WHILE_CAPS_WORD";
            #binding-cells = <0>;
            bindings = <&caps_word_lower>, <&caps_word_exit F22>;
        };

        caps_word_dash_underscore: caps_word_dash_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS_WORD_DASH_UNDERSCORE";
            bindings = <&kp UNDERSCORE>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LSFT|MOD_RSFT)>;
        };

        thumb_mods: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
        };

        sl_long_term: sl_long_term {
            compatible = "zmk,behavior-sticky-key";
            label = "SL_LONG_TERM";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <60000>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 5>,
                <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;

            label = "THANKS_PAT";
        };

        triple_bquote: triple_bquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_BQUOTE";
        };

        browser_copy_url: browser_copy_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(D) &kp LC(C) &kp ESCAPE &kp TAB>;
            label = "BROWSER_COPY_URL";
        };

        caps_word_exit: caps_word_exit {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 4>;
            label = "CAPS_WORD_EXIT";
        };

        tab_switch: tab_switch {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 5>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 5>;

            label = "TAB_SWITCH";
        };

        curly_pair: curly_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT>;
            label = "CURLY_PAIR";
        };

        paren_pair: paren_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN_PAIR";
        };

        bracket_pair: bracket_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
            label = "BRACKET_PAIR";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };

        add_equal: add_equal {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp EQUAL>;
            label = "ADD_EQUAL";
        };

        double_tap: double_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "DOUBLE_TAP";
        };

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "SELECT_WORD_LEFT";
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_WORD_RIGHT";
        };

        extend_word_left: extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LEFT))>;
            label = "EXTEND_WORD_LEFT";
        };

        extend_word_right: extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(RIGHT))>;
            label = "EXTEND_WORD_RIGHT";
        };

        select_line_left: select_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_LINE_LEFT";
        };

        select_line_right: select_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE_RIGHT";
        };

        extend_line_left: extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
            label = "EXTEND_LINE_LEFT";
        };

        extend_line_right: extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "EXTEND_LINE_RIGHT";
        };

        select_mode_key: select_mode_key {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&sl_long_term 0>;

            label = "SELECT_MODE_KEY";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp EQUAL    &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &none                                                          &mo 6      &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB      &kp Q      &kp W     &kp E     &kp R      &kp T   &kp C_PLAY_PAUSE                                               &none      &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC      &kp A      &kp S     &kp D     &kp F      &kp G   &kp C_MUTE        &lower   &kp LALT      &kp LGUI   &lower     &kp INS    &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&shift_caps  &kp Z      &kp X     &kp C     &kp V      &kp B                              &kp HOME      &kp PG_UP                        &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &shift_caps
&kp LCTRL    &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BACKSPACE     &kp DEL  &kp END       &kp PG_DN  &kp ENTER  &kp SPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp RCTRL
            >;
        };

        HRM {
            bindings = <
&trans  &trans                 &trans                 &trans                  &trans                        &trans  &trans                                      &trans  &trans  &trans                          &trans                   &trans                  &trans                          &trans
&trans  &trans                 &trans                 &trans                  &trans                        &trans  &trans                                      &trans  &trans  &trans                          &trans                   &trans                  &trans                          &trans
&trans  &home_row_left LGUI A  &home_row_left LALT S  &home_row_left LCTRL D  &home_row_left_index LSHFT F  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &home_row_right_index RSHIFT J  &home_row_right LCTRL K  &home_row_right RALT L  &home_row_right RGUI SEMICOLON  &trans
&trans  &trans                 &trans                 &trans                  &trans                        &trans                  &trans      &trans                  &trans  &trans                          &trans                   &trans                  &trans                          &trans
&trans  &trans                 &trans                 &trans                  &trans                                &trans  &trans  &trans      &trans  &trans  &trans          &trans                          &trans                   &trans                  &trans                          &trans
            >;
        };

        Lower {
            bindings = <
&trans  &kp F1      &kp F2         &kp F3     &kp F4                &kp F5                 &trans                                               &trans           &kp F6        &kp F7           &kp F8     &kp F9         &kp F10       &kp F11
&trans  &kp GRAVE   &triple_quote  &kp TILDE  &tab_switch LALT TAB  &tab_switch LCTRL TAB  &kp PRINTSCREEN                                      &kp SCROLLLOCK   &kp HOME      &kp PG_DN        &kp PG_UP  &kp END        &thanks_pat   &kp F12
&trans  &sk LGUI    &sk LALT       &sk LCTRL  &sk LSHFT             &trans                 &kp SYSREQ       &trans  &trans      &trans  &trans  &kp PAUSE_BREAK  &kp LEFT      &kp DOWN         &kp UP     &kp RIGHT      &trans        &trans
&trans  &kp LC(Z)   &kp LC(X)      &kp LC(C)  &kp LC(V)             &trans                                          &trans      &trans                           &kp LC(LEFT)  &sl_long_term 0  &trans     &kp LC(RIGHT)  &trans        &trans
&trans  &kp C_PREV  &kp C_NEXT     &trans     &trans                                       &trans           &trans  &trans      &trans  &trans  &trans                         &trans           &trans     &kp C_VOL_DN   &kp C_VOL_UP  &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        CapsWord {
            bindings = <
&caps_word_exit EQUAL  &kp N1                 &kp N2                  &kp N3                &kp N4                 &kp N5     &trans                                                                                               &trans                 &kp N6     &kp N7              &kp N8                 &kp N9                        &kp N0                         &hold_tap_keys MINUS UNDERSCORE
&caps_word_exit TAB    &kp LS(Q)              &kp LS(W)               &kp LS(E)             &kp LS(R)              &kp LS(T)  &trans                                                                                               &trans                 &kp LS(Y)  &kp LS(U)           &kp LS(I)              &kp LS(O)                     &kp LS(P)                      &caps_word_exit BACKSLASH
&caps_word_exit ESC    &kp LS(A)              &hold_tap_keys S LS(S)  &kp LS(D)             &kp LS(F)              &kp LS(G)  &trans  &trans               &trans                    &trans                 &trans                 &trans                 &kp LS(H)  &kp LS(J)           &kp LS(K)              &kp LS(L)                     &caps_word_exit SEMICOLON      &caps_word_exit SQT
&trans                 &kp LS(Z)              &kp LS(X)               &kp LS(C)             &kp LS(V)              &kp LS(B)                               &caps_word_exit HOME      &caps_word_exit PG_UP                                                &kp LS(N)  &kp LS(M)           &caps_word_exit COMMA  &caps_word_exit PERIOD        &caps_word_exit SLASH          &trans
&trans                 &caps_word_exit GRAVE  &caps_word_exit CAPS    &caps_word_exit LEFT  &caps_word_exit RIGHT             &trans  &caps_word_exit DEL  &caps_word_exit END       &caps_word_exit PG_DN  &caps_word_exit ENTER  &caps_word_exit SPACE             &caps_word_exit UP  &caps_word_exit DOWN   &caps_word_exit LEFT_BRACKET  &caps_word_exit RIGHT_BRACKET  &trans
            >;
        };

        TabSwitcher {
            bindings = <
&none  &none  &none  &none     &none      &none  &none                                         &none  &none        &none   &none     &none    &none  &none
&none  &none  &none  &none     &none      &none  &none                                         &none  &none        &none   &none     &none    &none  &none
&none  &none  &none  &none     &none      &none  &none  &none  &none         &none      &none  &none  &kp LS(TAB)  &none   &none     &kp TAB  &none  &none
&none  &none  &none  &none     &none      &none                &kp HOME      &kp PG_UP                &none        &none   &none     &none    &none  &none
&none  &none  &none  &kp LEFT  &kp RIGHT         &none  &none  &kp END       &kp PG_DN  &none  &none               &kp UP  &kp DOWN  &none    &none  &none
            >;
        };

        System {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
