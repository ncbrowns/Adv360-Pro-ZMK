#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 68 69 70 71 72 73 74 75 37 35 36 52 65 66 67>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 38 68 69 70>;
        };

        home_row_left_index: home_row_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 68 69 70 71 72 73 74 75 37 35 36 52 65 66 67>;
        };

        home_row_right_index: home_row_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 38 68 69 70>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&tog 5>;
        };

        caps_word_hold_tap: caps_word_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
        };

        curly_morph: curly_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "CURLY_MORPH";
            bindings = <&kp LEFT_BRACE>, <&curly_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        paren_morph: paren_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_MORPH";
            bindings = <&kp LEFT_PARENTHESIS>, <&paren_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_morph: bracket_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_MORPH";
            bindings = <&kp LEFT_BRACKET>, <&bracket_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sym_or_eq: sym_or_eq {
            compatible = "zmk,behavior-hold-tap";
            label = "SYM_OR_EQ";
            bindings = <&add_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_plus: td_plus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLUS";
            #binding-cells = <0>;
            bindings = <&sym_or_eq PLUS PLUS>, <&double_tap PLUS>;
        };

        td_minus: td_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MINUS";
            #binding-cells = <0>;
            bindings = <&sym_or_eq MINUS MINUS>, <&double_tap MINUS>;
        };

        td_eq: td_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_EQ";
            #binding-cells = <0>;
            bindings = <&sym_or_eq EQUAL EQUAL>, <&double_tap EQUAL>;
        };

        td_not: td_not {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NOT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq EXCL EXCL>, <&double_tap EXCL>;
        };

        td_lt: td_lt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq LT LT>, <&double_tap LT>;
        };

        td_gt: td_gt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq GT GT>, <&double_tap GT>;
        };

        td_or: td_or {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_OR";
            #binding-cells = <0>;
            bindings = <&sym_or_eq PIPE PIPE>, <&double_tap PIPE>;
        };

        td_and: td_and {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_AND";
            #binding-cells = <0>;
            bindings =
                <&sym_or_eq AMPERSAND AMPERSAND>,
                <&double_tap AMPERSAND>;
        };

        td_xor: td_xor {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_XOR";
            #binding-cells = <0>;
            bindings = <&sym_or_eq CARET CARET>, <&double_tap CARET>;
        };

        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SLASH";
            #binding-cells = <0>;
            bindings = <&sym_or_eq SLASH SLASH>, <&double_tap SLASH>;
        };

        thumb_mods: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        esc_sym: esc_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_SYM";
            #binding-cells = <0>;
            bindings = <&lt 3 ESC>, <&tog 3>;
        };

        td_nav: td_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NAV";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&tog 2>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3>;
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 5>,
                <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;

            label = "THANKS_PAT";
        };

        triple_bquote: triple_bquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_BQUOTE";
        };

        browser_copy_url: browser_copy_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(D) &kp LC(C) &kp ESCAPE &kp TAB>;
            label = "BROWSER_COPY_URL";
        };

        caps_word_exit: caps_word_exit {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 5>;
            label = "CAPS_WORD_EXIT";
        };

        tab_switch: tab_switch {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 6>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 6>;

            label = "TAB_SWITCH";
        };

        curly_pair: curly_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT>;
            label = "CURLY_PAIR";
        };

        paren_pair: paren_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN_PAIR";
        };

        bracket_pair: bracket_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
            label = "BRACKET_PAIR";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };

        add_equal: add_equal {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp EQUAL>;
            label = "ADD_EQUAL";
        };

        double_tap: double_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "DOUBLE_TAP";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp EQUAL    &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &none                                                                                                 &mo 7                     &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB      &kp Q      &kp W     &kp E     &kp R      &kp T   &kp C_PLAY_PAUSE                                                                                      &none                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC      &kp A      &kp S     &kp D     &kp F      &kp G   &kp C_MUTE                   &esc_sym               &kp LALT      &kp LGUI   &td_nav                  &kp INS                   &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&shift_caps  &kp Z      &kp X     &kp C     &kp V      &kp B                                                       &kp HOME      &kp PG_UP                                                     &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &shift_caps
&kp LCTRL    &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &thumb_mods LSHFT BACKSPACE  &thumb_mods LCTRL DEL  &kp END       &kp PG_DN  &thumb_mods RCTRL ENTER  &thumb_mods RSHIFT SPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp INSERT
            >;
        };

        Navigation {
            bindings = <
&kp LA(LC(F3))  &kp F1        &kp F2         &kp F3                &kp F4                     &kp F5                 &trans                                               &trans           &kp F6              &kp F7             &kp F8           &kp F9         &kp F10       &kp F11
&kp LA(LC(F2))  &kp LA(LEFT)  &kp LA(RIGHT)  &tab_switch LALT TAB  &tab_switch LCTRL LS(TAB)  &tab_switch LCTRL TAB  &kp PRINTSCREEN                                      &kp SCROLLLOCK   &kp HOME            &kp PAGE_DOWN      &kp PAGE_UP      &kp END        &thanks_pat   &kp F12
&kp LA(LC(F1))  &sk LGUI      &sk LALT       &sk LCTRL             &sk LSHFT                  &trans                 &kp SYSREQ       &trans  &trans      &trans  &tog 2  &kp PAUSE_BREAK  &kp LEFT            &kp DOWN           &kp UP           &kp RIGHT      &trans        &trans
&trans          &kp LC(Z)     &kp LC(X)      &kp LC(C)             &kp LC(V)                  &browser_copy_url                               &trans      &trans                           &kp LC(LEFT_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(PAGE_UP)  &kp LC(RIGHT)  &trans        &trans
&trans          &kp C_PREV    &kp C_NEXT     &trans                &trans                                            &trans           &trans  &trans      &trans  &trans  &trans                               &trans             &trans           &kp C_VOL_DN   &kp C_VOL_UP  &trans
            >;
        };

        LeftWithMouse {
            bindings = <
&kp LA(LC(F3))  &kp F1        &kp F2         &kp F3                &kp F4                     &kp F5                 &trans                                               &trans           &kp F6              &kp F7             &kp F8           &kp F9         &kp F10       &kp F11
&kp LA(LC(F2))  &kp LA(LEFT)  &kp LA(RIGHT)  &tab_switch LALT TAB  &tab_switch LCTRL LS(TAB)  &tab_switch LCTRL TAB  &kp PRINTSCREEN                                      &kp SCROLLLOCK   &kp HOME            &kp PAGE_DOWN      &kp PAGE_UP      &kp END        &thanks_pat   &kp F12
&kp LA(LC(F1))  &sk LGUI      &sk LALT       &sk LCTRL             &sk LSHFT                  &trans                 &kp SYSREQ       &trans  &trans      &trans  &tog 2  &kp PAUSE_BREAK  &kp LEFT            &kp DOWN           &kp UP           &kp RIGHT      &trans        &trans
&trans          &kp LC(Z)     &kp LC(X)      &kp LC(C)             &kp LC(V)                  &browser_copy_url                               &trans      &trans                           &kp LC(LEFT_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(PAGE_UP)  &kp LC(RIGHT)  &trans        &trans
&trans          &kp C_PREV    &kp C_NEXT     &trans                &trans                                            &trans           &trans  &trans      &trans  &trans  &trans                               &trans             &trans           &kp C_VOL_DN   &kp C_VOL_UP  &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &trans                  &trans                        &trans                      &trans     &trans                        &trans                                      &trans  &trans       &trans          &trans        &trans              &trans   &trans
&trans  &kp GRAVE               &td_xor                       &td_or                      &td_and    &sym_or_eq QUESTION QUESTION  &trans                                      &trans  &kp AT_SIGN  &curly_morph    &kp LS(RBRC)  &td_lt              &td_gt   &trans
&trans  &sym_or_eq TILDE TILDE  &sym_or_eq ASTERISK ASTERISK  &td_minus                   &td_plus   &trans                        &trans  &tog 3  &trans      &trans  &trans  &trans  &kp DOLLAR   &paren_morph    &kp LS(RPAR)  &td_eq              &td_not  &trans
&trans  &triple_bquote          &trans                        &sym_or_eq PERCENT PERCENT  &td_slash  &trans                                        &trans      &trans                  &kp HASH     &bracket_morph  &kp RBKT      &sym_or_eq DOT DOT  &arrow   &trans
&trans  &trans                  &trans                        &trans                      &trans                                   &trans  &trans  &trans      &trans  &trans  &trans               &trans          &trans        &trans              &trans   &trans
            >;
        };

        FunctionKeys {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                      &trans  &trans  &trans  &trans   &trans   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                      &trans  &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans    &trans    &trans     &trans     &trans                  &trans      &trans                  &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        CapsWord {
            bindings = <
&caps_word_exit EQUAL   &kp N1                 &kp N2                       &kp N3                &kp N4                 &kp N5     &trans                                                                                             &trans                 &kp N6     &kp N7                    &kp N8                 &kp N9                        &kp N0                         &caps_word_hold_tap MINUS LS(MINUS)
&caps_word_exit TAB     &kp LS(Q)              &kp LS(W)                    &kp LS(E)             &kp LS(R)              &kp LS(T)  &trans                                                                                             &trans                 &kp LS(Y)  &kp LS(U)                 &kp LS(I)              &kp LS(O)                     &kp LS(P)                      &caps_word_exit BACKSLASH
&caps_word_exit ESCAPE  &kp LS(A)              &caps_word_hold_tap S LS(S)  &kp LS(D)             &kp LS(F)              &kp LS(G)  &trans  &tog 5               &trans                    &trans                 &tog 5               &trans                 &kp LS(H)  &kp LS(J)                 &kp LS(K)              &kp LS(L)                     &caps_word_exit SEMI           &caps_word_exit SQT
&trans                  &kp LS(Z)              &kp LS(X)                    &kp LS(C)             &kp LS(V)              &kp LS(B)                               &caps_word_exit HOME      &caps_word_exit PG_UP                                              &kp LS(N)  &kp LS(M)                 &caps_word_exit COMMA  &caps_word_exit PERIOD        &caps_word_exit SLASH          &trans
&trans                  &caps_word_exit GRAVE  &caps_word_exit CAPS         &caps_word_exit LEFT  &caps_word_exit RIGHT             &trans  &caps_word_exit DEL  &caps_word_exit END       &caps_word_exit PG_DN  &caps_word_exit RET  &caps_word_exit SPACE             &caps_word_exit UP_ARROW  &caps_word_exit DOWN   &caps_word_exit LEFT_BRACKET  &caps_word_exit RIGHT_BRACKET  &caps_word_exit INS
            >;
        };

        TabSwitcher {
            bindings = <
&none  &none  &none        &none  &none    &none  &none                                  &none  &none        &none         &none         &none    &none  &none
&none  &none  &none        &none  &none    &none  &none                                  &none  &none        &none         &none         &none    &none  &none
&none  &none  &kp LS(TAB)  &none  &kp TAB  &none  &none  &none  &none      &none  &none  &none  &kp LS(TAB)  &kp DOWN      &kp UP_ARROW  &kp TAB  &none  &none
&none  &none  &none        &none  &none    &none                &none      &none                &none        &none         &none         &none    &none  &none
&none  &none  &none        &none  &none           &none  &none  &none      &none  &none  &none               &kp UP_ARROW  &kp DOWN      &none    &none  &none
            >;
        };

        System {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &to 0         &to 0         &to 0         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        FunctionKeys {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
