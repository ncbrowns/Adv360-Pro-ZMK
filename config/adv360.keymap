#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "SELECT_WORD_LEFT";
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_WORD_RIGHT";
        };

        extend_word_left: extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LEFT))>;
            label = "EXTEND_WORD_LEFT";
        };

        extend_word_right: extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(RIGHT))>;
            label = "EXTEND_WORD_RIGHT";
        };

        select_line_left: select_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_LINE_LEFT";
        };

        select_line_right: select_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE_RIGHT";
        };

        extend_line_left: extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
            label = "EXTEND_LINE_LEFT";
        };

        extend_line_right: extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "EXTEND_LINE_RIGHT";
        };

        caps_word_exit: caps_lock_exit {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 3 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "CAPS_LOCK_EXIT";
        };

        caps_word_enter: caps_word_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&caps_word &tog 3>;
            label = "CAPS_WORD_ENTER";
        };

        triple_quote: triple_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_QUOTE";
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 10>,
                <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;

            label = "THANKS_PAT";
        };

        caps_word_lower: caps_word_lower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F22)>, <&macro_pause_for_release>, <&caps_word>;

            label = "CAPS_WORD_LOWER";
        };

        tab_switch: tab_switch {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 4>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 4>;

            label = "TAB_SWITCH";
        };

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LOWER";
            #binding-cells = <0>;
            bindings = <&sl 1>, <&tog 1>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&sk LSHIFT>, <&caps_word_enter>, <&kp CAPS>;
        };

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            label = "SELECT_WORD";
            bindings = <&select_word_right>, <&select_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            label = "EXTEND_WORD";
            bindings = <&extend_word_right>, <&extend_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            label = "SELECT_LINE";
            bindings = <&select_line_right>, <&select_line_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            label = "EXTEND_LINE";
            bindings = <&extend_line_right>, <&extend_line_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_caps_while_caps_word: shift_caps_while_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WHILE_CAPS_WORD";
            #binding-cells = <0>;
            bindings = <&caps_word_lower>, <&caps_word_exit F22>;
        };

        caps_word_dash_underscore: caps_word_dash_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS_WORD_DASH_UNDERSCORE";
            bindings = <&kp UNDERSCORE>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LSFT|MOD_RSFT)>;
        };

        thumb_mods: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        Cut_Chord {
            bindings = <&kp LC(X)>;
            key-positions = <48 41>;
        };

        Copy_Chord {
            bindings = <&kp LC(C)>;
            key-positions = <49 41>;
        };

        Paste_Chord {
            bindings = <&kp LC(V)>;
            key-positions = <50 41>;
        };

        nav_layer {
            bindings = <&tog 0>;
            key-positions = <32 41>;
        };

        nav_layer_left_hand {
            bindings = <&tog 0>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&kp EQUAL    &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &none                                                                     &mo 2                     &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB      &kp Q      &kp W     &kp E     &kp R      &kp T   &kp C_PLAY_PAUSE                                                          &none                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC      &kp A      &kp S     &kp D     &kp F      &kp G   &kp C_MUTE                   &lower   &kp LALT      &kp LGUI   &lower     &kp INS                   &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&shift_caps  &kp Z      &kp X     &kp C     &kp V      &kp B                                         &kp HOME      &kp PG_UP                                       &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &shift_caps
&kp LCTRL    &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &thumb_mods LSHFT BACKSPACE  &kp DEL  &kp END       &kp PG_DN  &kp ENTER  &thumb_mods RSHIFT SPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp RCTRL
            >;
        };

        Lower {
            bindings = <
&trans  &kp F1      &kp F2         &kp F3     &kp F4            &kp F5             &trans                                               &trans           &kp F6     &kp F7    &kp F8    &kp F9        &kp F10       &kp F11
&trans  &kp GRAVE   &triple_quote  &kp TILDE  &tab_switch LALT  &tab_switch LCTRL  &kp PRINTSCREEN                                      &kp SCROLLLOCK   &kp PG_UP  &kp HOME  &kp UP    &kp END       &thanks_pat   &kp F12
&trans  &sk LGUI    &sk LALT       &sk LCTRL  &sk LSHFT         &trans             &kp SYSREQ       &trans  &trans      &trans  &trans  &kp PAUSE_BREAK  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT     &trans        &trans
&trans  &kp LC(Z)   &kp LC(X)      &kp LC(C)  &kp LC(V)         &trans                                      &trans      &trans                           &trans     &trans    &trans    &trans        &trans        &trans
&trans  &kp C_PREV  &kp C_NEXT     &trans     &trans                               &trans           &trans  &trans      &trans  &trans  &trans                      &trans    &trans    &kp C_VOL_DN  &kp C_VOL_UP  &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        caps_word {
            bindings = <
&caps_word_exit EQUAL        &trans                 &trans                &trans                &trans                 &trans  &trans                                                                                               &trans                 &trans  &trans              &trans                 &trans                        &trans                         &caps_word_dash_underscore
&caps_word_exit TAB          &trans                 &trans                &trans                &trans                 &trans  &trans                                                                                               &trans                 &trans  &trans              &trans                 &trans                        &trans                         &caps_word_exit BACKSLASH
&caps_word_exit ESC          &trans                 &trans                &trans                &trans                 &trans  &trans  &trans               &trans                    &trans                 &trans                 &trans                 &trans  &trans              &trans                 &trans                        &caps_word_exit SEMICOLON      &caps_word_exit SQT
&shift_caps_while_caps_word  &trans                 &trans                &trans                &trans                 &trans                               &caps_word_exit HOME      &caps_word_exit PG_UP                                                &trans  &trans              &caps_word_exit COMMA  &caps_word_exit PERIOD        &caps_word_exit SLASH          &shift_caps_while_caps_word
&trans                       &caps_word_exit GRAVE  &caps_word_exit CAPS  &caps_word_exit LEFT  &caps_word_exit RIGHT          &trans  &caps_word_exit DEL  &caps_word_exit END       &caps_word_exit PG_DN  &caps_word_exit ENTER  &caps_word_exit SPACE          &caps_word_exit UP  &caps_word_exit DOWN   &caps_word_exit LEFT_BRACKET  &caps_word_exit RIGHT_BRACKET  &trans
            >;
        };

        Tab_Switch {
            bindings = <
&trans  &trans       &trans   &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans   &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(TAB)  &kp TAB  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans   &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans   &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
